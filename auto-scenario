#! /bin/bash

MINIWORLD_TRACEBACK_PATH=/root/miniworld/MiniWorld/miniworld_traceback.log

rpc_runloop_exception_handler () {
    echo "Exception occured on RPC runloop. See '$MINIWORLD_TRACEBACK_PATH' for more information."
    cat $MINIWORLD_TRACEBACK_PATH
    echo "Aborting scenario test!"
    exit
}

run_rpc_check_error_loop() {
	#path=pwd
	cd /root/miniworld/MiniWorld
	python miniworld/rpc/RPCCheckErrors.py -pg $MAIN_PROCESS_PID -t $MINIWORLD_TRACEBACK_PATH -s 10 MiniWorld_Scenarios/serval_paper/scenario_chain_64n.json&
	echo $!
	#cd path
}

exec_scenario () {
    echo "Starting scenario: $@"
    (eval ./scenario $@)
}

cleanup () {
    # ./$1-execute-all 'for i in $(servald rhizome list | cut -d":" -f3 | tail -n+3);do servald rhizome delete bundle $i; done; '
    # if [ $1 = "miniworld" ]; then
        # ./$1-execute-all 'rm -rf /tmp/serval-monitor'
    # fi
}

initialize_miniworld_topology () {
    (cd /root/miniworld/MiniWorld && python miniworld/rpc/RPCStartScenario.py MiniWorld_Scenarios/serval_paper/$1)
    return_code=$?
    echo $return_code
}

finalize_miniworld_topology () {
    pkill -fe RPCServer.py
    #(cd /root/miniworld/MiniWorld && python miniworld/rpc/RPCStopScenario.py)
    return $?
}

trap rpc_runloop_exception_handler SIGUSR1
MAIN_PROCESS_PID=$$
echo "MAIN_PROCESS_PID: $MAIN_PROCESS_PID"

echo -e "\e[0;32m\e[1;44m# Running Scenario Configurations from $1 #\e[0m"

TIMESTAMP=`date +%Y-%m-%d_%H-%M`
mapfile -t LINES <$1

for line in "${LINES[@]}"; do
    OLDIFS=$IFS
    IFS=" " read -ra line_arr <<< "$line"

    len=${#line_arr[@]}
    env=${line_arr[0]}
    scenario=${line_arr[@]:1:$(( len-3 ))}
    params=${line_arr[@]:2:$(( len-3 ))}
    repeat=${line_arr[-2]:1:${#line_arr[-2]}}
    topology=${line_arr[-1]}

    IFS='" "' read -r -a params_arr <<< "$params"

    IFS=$OLDSIFS

    WATCHER_PID=run_rpc_check_error_loop

    echo -e "\e[0;30m\e[1;44m# $repeat iterations of $scenario on $env using $topology with the following configuration: #\e[0m"
    echo -e "\e[0;30m\e[1;44m# $line #\e[0m"
    run=1
    while [ $run -le $repeat ]; do
	    init=-1
        if [ $env = "miniworld" ]; then
            init=$(initialize_miniworld_topology $topology)
            echo -e "\e[0;32m\e[1;44m# Starting RPC runloop watcher #\e[0m"
        else
            init=0
        fi
	    if [ -n params_arr[0] ]; then
		    P="P-${params_arr[0]// /_}"
	    fi

	    if [ -n params_arr[1] ]; then
		    W="W-${params_arr[1]// /_}"
	    fi

	    if [ -n params_arr[2] ]; then
   		    I="I-${params_arr[2]// /_}"
	    fi

        if [ $init -eq 0 ]; then
            exec_scenario $env $scenario -appendix $TIMESTAMP-`printf "%s_" $P``printf "%s_"$W``printf "%s_" $I`on_$topology-run`printf "%03g" $run`
            cleanup $env
            run=$(( run + 1 ))
            if [ $env = "miniworld" ]; then
                echo -e "\e[0;30m\e[1;42m# Iteration done. Finalizing topology. #\e[0m"
                finalize_miniworld_topology
            fi
            scenarioname=${line_arr[1]}
            mkdir -p /tmp/serval-monitor-miniworld/$TIMESTAMP-$scenarioname
            find /tmp/serval-monitor-miniworld -type d -name $scenarioname-$TIMESTAMP* -exec mv -t /tmp/serval-monitor-miniworld/$TIMESTAMP-$scenarioname {} \+
        else
            echo -e "\e[30m\e[1;41m# Initialization failed. #\e[0m"
            exit
        fi
    done
done
