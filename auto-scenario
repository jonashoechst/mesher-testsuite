#! /bin/bash

MINIWORLD_TRACEBACK_PATH=/root/miniworld/MiniWorld/miniworld_traceback.log

rpc_runloop_exception_handler () {
    echo -e "\e[37m\e[44m# Exception occured on RPC runloop. See '$MINIWORLD_TRACEBACK_PATH' for more information:\e[0m"
    cat $MINIWORLD_TRACEBACK_PATH
    echo -e "\e[37m\e[44m# Aborting scenario test!\e[0m"
    exit 1
}

start_rpc_watcher() {
    echo -e "\e[37m\e[44m# Starting RPC watcher...\e[0m"
	(cd /root/miniworld/MiniWorld && python miniworld/rpc/RPCCheckErrors.py -pg $MAIN_PROCESS_PID -t $MINIWORLD_TRACEBACK_PATH -s 10 MiniWorld_Scenarios/serval_paper/$1 > /dev/null) &
    WATCHER_PID=$!
}

exec_scenario () {
    echo -e "\e[m\e[47m### Performing scenario: $@\e[0m"
    (eval ./scenario $@)
    ret=$?
    if [ $ret -eq 0 ]; then
        echo -e "\e[32m\e[47m### Scenario finished successfully!\e[0m"
    else
        echo -e "\e[31m\e[47m### Scenario failed with return code $ret...\n`./scenario | tail -n-5`\e[0m"
    fi
    return $ret
}

# cleanup () {
#     ./$1-execute-all 'for i in $(servald rhizome list | cut -d":" -f3 | tail -n+3); do servald rhizome delete bundle $i; done; '
#     if [ $1 = "miniworld" ]; then
#         ./$1-execute-all 'rm -rf /tmp/serval-monitor'
#     fi
# }

initialize_miniworld_topology () {
    echo -e "\e[m\e[47m### Starting RPC scenario...\e[0m"
    (cd /root/miniworld/MiniWorld && python miniworld/rpc/RPCStartScenario.py MiniWorld_Scenarios/serval_paper/$1)
    init=$?
    if [ $init -eq 0 ]; then
        echo -e "\e[32m\e[47m### RPC scenario started successfully!\e[0m"
    else
        echo -e "\e[31m\e[47m### Initialization failed (returned $init).\e[0m"
    fi
    return $init
}

finalize_miniworld_topology () {
    echo -e "\e[m\e[47m### Iteration done, finalizing topology.\e[0m"
    pkill -fe RPCServer.py
    #(cd /root/miniworld/MiniWorld && python miniworld/rpc/RPCStopScenario.py)
    return $?
}

beautify_params () {
    for param in "$@"; do
        ret=$ret`eval echo $param- | sed "s/f /f./g; s/\ //g"`
    done
    echo -$ret
}

trap rpc_runloop_exception_handler SIGUSR1
MAIN_PROCESS_PID=$$
echo -e "\e[37m\e[44m# Autorunning scenario configurations from $1, pid: $MAIN_PROCESS_PID\e[0m"

mapfile -t LINES <$1

AUTO_SCENARIO_START=`date +%Y-%m-%d_%H-%M`
AUTO_LOGFOLDER=/tmp/serval-monitor/${AUTO_SCENARIO_START}_$(basename ${1})

for line in "${LINES[@]}"; do
    # configuration file line parsing
    OLDIFS=$IFS
    IFS=" " read -ra line_arr <<< "$line"
    len=${#line_arr[@]}
    env=${line_arr[0]}
    scenario=${line_arr[@]:1:$(( len-3 ))}
    params=${line_arr[@]:2:$(( len-4 ))}
    repeat=${line_arr[-2]:1:${#line_arr[-2]}}
    topology=${line_arr[-1]}
    
    # Starting RPC watcher
    start_rpc_watcher $topology
    
    echo -e "\n\e[37m\e[40m## Running set:   $env | $topology | $scenario | repeating $repeat times\e[0m"

    run=1
    while [ $run -le $repeat ]; do
        echo -e "\e[m\e[47m### Iteration #$run: $env | $topology | $scenario\e[0m"
        scenarioname=${line_arr[1]}
        SCENARIO_LOGFOLDER=$AUTO_LOGFOLDER/$scenarioname-$env
        
        RUN_START=`date +%Y-%m-%d_%H-%M`
        SHORT_PARAMS=`eval beautify_params $params`
        echo Beautiful params: $SHORT_PARAMS
        
        export LOGFOLDER=$SCENARIO_LOGFOLDER/$topology-run`printf "%03g" $run`-$scenarioname-$SHORT_PARAMS-$RUN_START
        mkdir -p $LOGFOLDER
        echo "$line" > $LOGFOLDER/parameters.conf
        
        init=-1
        if [ $env = "miniworld" ]; then
            initialize_miniworld_topology $topology | tee $LOGFOLDER/rpc_init.log 2>&1
            init=${PIPESTATUS[0]}
        fi

        if [ $init -eq 0 ]; then 
            exec_scenario $env $scenario --logfolder $LOGFOLDER | tee $LOGFOLDER/scenario.log 2>&1
        fi
            
        if [ $env = "miniworld" ]; then 
            finalize_miniworld_topology
        fi

        run=$(( run + 1 ))
    done
    
    kill $WATCHER_PID > /dev/null
done

echo -e "\n\e[37m\e[44m# Done autorunning scenario configurations from $1\e[0m"
