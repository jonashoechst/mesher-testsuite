#! /bin/bash
if [ "$1" = "-h" ] || [ "$#" -lt 2 ]; then
    echo "usage: $0 scenario p w i [n1 ... | -a ]"
    echo "starts a scenario with prepare/initiate at all given nodes"
    echo "       params for scripts: p - preparations"
    echo "       params for scripts: w - watch-agents"
    echo "       params for scripts: i - initialization"
fi

# test if scenario is available
if [ ! -d "$1" ]; then
    echo -e "\e[1;31mError: Scenario does not exist\e[0m"
    exit 1
fi

# Gathering Nodes
ALL_NODES=`find /tmp/ 2>/dev/null | grep pycore.*/n[0-9]*$`
NUM_ALL_NODES=`find /tmp/ 2>/dev/null | grep pycore.*/n[0-9]*$ | wc -l`
if [ "$ALL_NODES" == "" ]; then
    echo -e "\e[1;31mError: Couldn't find any core nodes\e[0m"
    exit 1
fi

if [ $5 = "-a" ]; then
    ACTIVE_NODES=$ALL_NODES
else
    for node in "${@:5}"; do
        ACTIVE_NODES="${ACTIVE_NODES}`find /tmp/ 2>/dev/null | grep pycore.*/$node$` "
    done
fi

echo -e "\e[1;32mRunning Scenario $1 "
echo -n -e "  Using CORE Nodes "
for NODE in ${ALL_NODES}; do printf "`basename $NODE` "; done; echo
echo -n -e "  Active CORE Nodes "
for NODE in ${ACTIVE_NODES}; do printf "`basename $NODE` "; done; echo -e "\e[0m"

# Variables for background jobs
FAIL="0"
PIDS=""



### PHASE 1
echo -e "\e[1;34mPhase 1 - Prepare: $1/prepare $2\e[0m"

PREPARE=`readlink -e $1/prepare`
for node in $ACTIVE_NODES; do
    vcmd -c $node -- sh -c "$PREPARE $NUM_ALL_NODES $2"
done



### PHASE 2
echo -n -e "\e[1;34mPhase 2 - Starting system monitoring\e[0m"
for node in $ALL_NODES; do
    vcmd -c $node -- sh -c "/home/meshadmin/serval-tests/monitor system" &
    PIDS="$PIDS $!"
done
for PID in $PIDS; do
    wait $PID || let "FAIL=$?"
    printf .
    if [ "$FAIL" != "0" ]; then echo -e "\e[1;31mPhase 2: monitor $PID failed with $FAIL, aborting scenario.\e[0m"; exit 2; fi
done
echo
PIDS=""



### PHASE 3
echo -n -e "\e[1;34mPhase 3 - Starting servald\e[0m"
for node in $ALL_NODES; do
    vcmd -c $node -- sh -c "servald start > /dev/null" &
    PIDS="$PIDS $!"
done
for PID in $PIDS; do
    wait $PID || let "FAIL=$?"
    printf .
    if [ "$FAIL" != "0" ]; then echo -e "\e[1;31mPhase 3: serval $PID failed with $FAIL, aborting scenario.\e[0m"; exit 2; fi
done
echo
PIDS=""


echo -n -e "\e[1;34mPhase 3.5 - Scanning for servald instances\e[0m"
for node in $ALL_NODES; do
    vcmd -c $node -- bash -c '''
        for i in `ifconfig | grep "inet addr:10." | cut -d":" -f 2 | cut -d"." -f1,2,3`; do
            servald scan $i.255 > /dev/null
        done'''
    printf .
done
echo



### PHASE 4
echo -n -e "\e[1;34mPhase 4 - Starting servald monitoring\e[0m"
for node in $ALL_NODES; do
    vcmd -c $node -- sh -c "/home/meshadmin/serval-tests/monitor serval" &
    PIDS="$PIDS $!"
done
for PID in $PIDS; do
    wait $PID || let "FAIL=$?"
    printf .
    if [ "$FAIL" != "0" ]; then echo "\e[1;31mPhase 4: monitor $PID failed with $FAIL, aborting scenario.\e[0m"; exit 4; fi
done
echo
PIDS=""




### PHASE 5
# using trap to kill running vcmds
trap "kill $AGENTS 2> /dev/null; echo Killed agents; exit" SIGINT SIGTERM

echo -n -e "\e[1;34mPhase 5 - Starting watch-agents: $1/watch-agent $3\e[0m"
PREPARE=`readlink -e $1/watch-agent`
for node in $ALL_NODES; do
    vcmd -c $node -- sh -c "$PREPARE $NUM_ALL_NODES $3" &
    AGENTS="$AGENTS $!"
    printf .
done
echo




### PHASE 6
echo -e "\e[1;34mPhase 6 - Initiating Scenario: $1/initiate $4\e[0m"
INIT=`readlink -e $1/initiate`
for node in $ACTIVE_NODES; do
    vcmd -c $node -- sh -c "$INIT $NUM_ALL_NODES $4"
done




### PHASE 7
echo -n -e "\e[1;34mPhase 7 - Waiting for agents\e[0m"
FAIL="0"
for PID in $AGENTS; do
    wait $PID || let "FAIL=$?"
    printf .
    if [ "$FAIL" != "0" ]; then break; fi
done
echo

if [ "$FAIL" == "0" ]; then
    echo -n -e "\e[1;32mPhase 7: watch-agents finished, sleeping 5 seconds to have a trailer in monitoring\e[0m"
    for i in {1..5}; do printf .; sleep 1; done
    echo
else
    echo -e "\e[1;31mPhase 7: watch-agent $PID failed with $FAIL, aborting scenario.\e[0m"
    kill $AGENTS 2> /dev/null
    exit 1
fi




### PHASE 8
echo -n -e "\e[1;34mPhase 8 - Teardown\e[0m"
for node in $ALL_NODES; do
    vcmd -c $node -- sh -c "/home/meshadmin/serval-tests/monitor stop"
    vcmd -c $node -- sh -c "servald stop > /dev/null"
    printf .
done
echo




### PHASE 9
echo -e "\e[1;34mPhase 9 - Data Collection: no data collection needed, check /tmp/serval-monitor\e[0m"
echo


echo -e "\e[1;32mScenario $1 done.\e[0m"
